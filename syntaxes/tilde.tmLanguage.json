{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "tilde",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#statements"
		},
		{
			"include": "types"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#variables"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.number-sign",
					"begin": "\\s*#",
					"end": "$"
				},
				{
					"name": "comment.block.tilde",
					"begin": "\\s*\\/",
					"end": "\\/"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"name": "keyword.control.tilde",
					"match": "\\b(if|else|while|for|do|break|continue|return|try|catch|finally|throw|switch|case|default|with|new|delete|typeof|instanceof|in|as|is|void|function|class|extends|this|super|import|export|from|async|await|public|private|protected|static|readonly|abstract|const|enum|implements|interface|let|package|protected|yield|volatile)\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "support.type.tilde",
					"match": "\\b(boolean|byte|char|double|float|int|long|short|void)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.tilde",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.tilde",
					"match": "\\\\."
				}
			]
		},
		"char": {
			"name": "string.quoted.single.tilde",
			"begin": "'",
			"end": "'",
			"patterns": [
				{
					"name": "constant.character.escape.tilde",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.tilde",
					"match": "\\b(0x[0-9a-fA-F]+|[0-9]+(\\.[0-9]+)?)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.tilde",
					"match": "\\=|\\+|\\-|\\*|\\/|\\%|\\^|\\&|\\||\\<|\\>|\\!"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.tilde",
					"match": "\\b([a-z_]\\w*\\b)"
				}
			]
		},
		"unexpected": {
			"patterns": [
				{
					"name": "invalid.illegal.tilde",
					"match": "\\b[A-Za-z_]\\w*\\b"
				}
			]
		}
	},
	"scopeName": "source.tilde"
}
