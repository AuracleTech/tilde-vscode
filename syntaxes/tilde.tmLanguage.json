{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "tilde",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#functions"
		},
		{
			"include": "#storages"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#unexpected"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.tilde",
					"begin": "\\s*#",
					"end": "$"
				},
				{
					"name": "comment.block.tilde",
					"begin": "\\s*~",
					"end": "~"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "variable.parameter.tilde",
					"match": "^\\b(def|main) ?([a-z_]+)? ?([a-z_ ]+)?\\s",
					"captures": {
						"1": {
							"name": "keyword.control.tilde"
						},
						"2": {
							"name": "entity.name.function.tilde"
						}
					}
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"match": "\\b(import|obj|class|const|let) ?([a-z_]+)?\\b",
					"captures": {
						"0": {
							"name": "variable.other.tilde"
						},
						"1": {
							"name": "storage.type.tilde"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.tilde",
					"match": "(\\?|if|else|return)"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.tilde",
					"match": "\\:|\\=|\\+|\\-|\\*|\\/|\\%|\\^|\\&|\\||\\<|\\>|\\!"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.tilde",
					"begin": "\\b[0-9]+",
					"end": "\\b"
				}
			]
		},
		"chars": {
			"name": "variable.language.tilde",
			"match": "'.'"
		},
		"strings": {
			"name": "string.quoted.double.tilde",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"match": "\\\\."
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"name": "variable.other.tilde",
					"match": "\\b[a-z_][a-z_]+\\b"
				}
			]
		},
		"unexpected": {
			"patterns": [
				{
					"name": "invalid.illegal.tilde",
					"match": "."
				}
			]
		}
	},
	"scopeName": "source.tilde"
}
